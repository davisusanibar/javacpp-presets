// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** Options for map_lookup function */
@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class MapLookupOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public MapLookupOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public MapLookupOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public MapLookupOptions position(long position) {
        return (MapLookupOptions)super.position(position);
    }
    @Override public MapLookupOptions getPointer(long i) {
        return new MapLookupOptions((Pointer)this).offsetAddress(i);
    }

  public enum Occurrence {
    /** Return the first matching value */
    FIRST(0),
    /** Return the last matching value */
    LAST(1),
    /** Return all matching values */
    ALL(2);

      public final int value;
      private Occurrence(int v) { this.value = v; }
      private Occurrence(Occurrence e) { this.value = e.value; }
      public Occurrence intern() { for (Occurrence e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }

  public MapLookupOptions(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar query_key, Occurrence occurrence) { super((Pointer)null); allocate(query_key, occurrence); }
  private native void allocate(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar query_key, Occurrence occurrence);
  public MapLookupOptions(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar query_key, @Cast("arrow::compute::MapLookupOptions::Occurrence") int occurrence) { super((Pointer)null); allocate(query_key, occurrence); }
  private native void allocate(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar query_key, @Cast("arrow::compute::MapLookupOptions::Occurrence") int occurrence);
  public MapLookupOptions() { super((Pointer)null); allocate(); }
  private native void allocate();

  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();

  /** The key to lookup in the map */
  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar query_key(); public native MapLookupOptions query_key(Scalar setter);

  /** Whether to return the first, last, or all matching values */
  public native Occurrence occurrence(); public native MapLookupOptions occurrence(Occurrence setter);
}
