// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief Abstract interface for reading stream of record batches */
@Namespace("arrow") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class RecordBatchReader extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RecordBatchReader(Pointer p) { super(p); }


  /** @return the shared schema of the record batches in the stream */
  
  ///
  public native @SharedPtr @ByVal Schema schema();

  /** \brief Read the next record batch in the stream. Return null for batch
   *  when reaching end of stream
   * 
   *  @param batch [out] the next loaded batch, null at end of stream
   *  @return Status */
  public native @ByVal Status ReadNext(@SharedPtr RecordBatch batch);

  public native @ByVal RecordBatchWithMetadataResult ReadNext();

  /** \brief Iterator interface */
  public native @ByVal RecordBatchResult Next();

  /** \brief finalize reader */
  public native @ByVal Status Close();

  @NoOffset public static class RecordBatchReaderIterator extends Pointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public RecordBatchReaderIterator(Pointer p) { super(p); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public RecordBatchReaderIterator(long size) { super((Pointer)null); allocateArray(size); }
      private native void allocateArray(long size);
      @Override public RecordBatchReaderIterator position(long position) {
          return (RecordBatchReaderIterator)super.position(position);
      }
      @Override public RecordBatchReaderIterator getPointer(long i) {
          return new RecordBatchReaderIterator((Pointer)this).offsetAddress(i);
      }
  

    public RecordBatchReaderIterator() { super((Pointer)null); allocate(); }
    private native void allocate();

    public RecordBatchReaderIterator(RecordBatchReader reader) { super((Pointer)null); allocate(reader); }
    private native void allocate(RecordBatchReader reader);

    public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef RecordBatchReaderIterator other);

    public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef RecordBatchReaderIterator other);

    public native @ByVal @Name("operator *") RecordBatchResult multiply();

    public native @ByRef @Name("operator ++") RecordBatchReaderIterator increment();

    public native @ByVal @Name("operator ++") RecordBatchReaderIterator increment(int arg0);
  }
  /** \brief Return an iterator to the first record batch in the stream */
  public native @ByVal RecordBatchReaderIterator begin();

  /** \brief Return an iterator to the end of the stream */
  public native @ByVal RecordBatchReaderIterator end();

  /** \brief Consume entire stream as a vector of record batches */
  public native @ByVal RecordBatchVectorResult ToRecordBatches();

  public native @Deprecated @ByVal Status ReadAll(RecordBatchVector batches);

  /** \brief Read all batches and concatenate as arrow::Table */
  public native @ByVal TableResult ToTable();

  
  ///
  public native @Deprecated @ByVal Status ReadAll(@SharedPtr Table table);

  /** \brief Create a RecordBatchReader from a vector of RecordBatch.
   * 
   *  @param batches [in] the vector of RecordBatch to read from
   *  @param schema [in] schema to conform to. Will be inferred from the first
   *             element if not provided. */
  
  ///
  public static native @ByVal RecordBatchReaderSharedResult Make(
        @ByVal RecordBatchVector batches, @SharedPtr @ByVal(nullValue = "std::shared_ptr<arrow::Schema>(nullptr)") Schema schema);
  public static native @ByVal RecordBatchReaderSharedResult Make(
        @ByVal RecordBatchVector batches);

  /** \brief Create a RecordBatchReader from an Iterator of RecordBatch.
   * 
   *  @param batches [in] an iterator of RecordBatch to read from.
   *  @param schema [in] schema that each record batch in iterator will conform to. */
  public static native @ByVal RecordBatchReaderSharedResult MakeFromIterator(
        @ByVal RecordBatchIterator batches, @SharedPtr @ByVal Schema schema);
}
