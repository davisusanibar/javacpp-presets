// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class FixedSizeBinaryScalar extends BinaryScalar {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public FixedSizeBinaryScalar(Pointer p) { super(p); }


  public FixedSizeBinaryScalar(@SharedPtr ArrowBuffer value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type,
                          @Cast("bool") boolean is_valid/*=true*/) { super((Pointer)null); allocate(value, type, is_valid); }
  private native void allocate(@SharedPtr ArrowBuffer value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type,
                          @Cast("bool") boolean is_valid/*=true*/);
  public FixedSizeBinaryScalar(@SharedPtr ArrowBuffer value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type) { super((Pointer)null); allocate(value, type); }
  private native void allocate(@SharedPtr ArrowBuffer value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type);

  public FixedSizeBinaryScalar(@SharedPtr ArrowBuffer value,
                                   @Cast("bool") boolean is_valid/*=true*/) { super((Pointer)null); allocate(value, is_valid); }
  private native void allocate(@SharedPtr ArrowBuffer value,
                                   @Cast("bool") boolean is_valid/*=true*/);
  public FixedSizeBinaryScalar(@SharedPtr ArrowBuffer value) { super((Pointer)null); allocate(value); }
  private native void allocate(@SharedPtr ArrowBuffer value);

  public FixedSizeBinaryScalar(@StdString String s, @Cast("bool") boolean is_valid/*=true*/) { super((Pointer)null); allocate(s, is_valid); }
  private native void allocate(@StdString String s, @Cast("bool") boolean is_valid/*=true*/);
  public FixedSizeBinaryScalar(@StdString String s) { super((Pointer)null); allocate(s); }
  private native void allocate(@StdString String s);
  public FixedSizeBinaryScalar(@StdString BytePointer s, @Cast("bool") boolean is_valid/*=true*/) { super((Pointer)null); allocate(s, is_valid); }
  private native void allocate(@StdString BytePointer s, @Cast("bool") boolean is_valid/*=true*/);
  public FixedSizeBinaryScalar(@StdString BytePointer s) { super((Pointer)null); allocate(s); }
  private native void allocate(@StdString BytePointer s);
}
