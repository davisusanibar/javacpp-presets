// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class DurationScalar extends BaseDurationScalar {
    static { Loader.load(); }

  
  
    public DurationScalar(@Cast("arrow::TemporalScalar<arrow::DurationType>::ValueType") long value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type) { super((Pointer)null); allocate(value, type); }
    private native void allocate(@Cast("arrow::TemporalScalar<arrow::DurationType>::ValueType") long value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type);
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public DurationScalar(Pointer p) { super(p); }


  public DurationScalar(@Cast("arrow::TemporalScalar<arrow::DurationType>::ValueType") long value,
                   TimeUnit.type unit) { super((Pointer)null); allocate(value, unit); }
  private native void allocate(@Cast("arrow::TemporalScalar<arrow::DurationType>::ValueType") long value,
                   TimeUnit.type unit);
  public DurationScalar(@Cast("arrow::TemporalScalar<arrow::DurationType>::ValueType") long value,
                   @Cast("arrow::TimeUnit::type") int unit) { super((Pointer)null); allocate(value, unit); }
  private native void allocate(@Cast("arrow::TemporalScalar<arrow::DurationType>::ValueType") long value,
                   @Cast("arrow::TimeUnit::type") int unit);

  // Convenience constructors for a DurationScalar from std::chrono::nanoseconds

  // Convenience constructors for a DurationScalar from std::chrono::microseconds

  // Convenience constructors for a DurationScalar from std::chrono::milliseconds

  // Convenience constructors for a DurationScalar from std::chrono::seconds
  // or from units which are whole numbers of seconds
}
