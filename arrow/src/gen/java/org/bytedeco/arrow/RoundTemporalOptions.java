// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class RoundTemporalOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RoundTemporalOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RoundTemporalOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public RoundTemporalOptions position(long position) {
        return (RoundTemporalOptions)super.position(position);
    }
    @Override public RoundTemporalOptions getPointer(long i) {
        return new RoundTemporalOptions((Pointer)this).offsetAddress(i);
    }

  public RoundTemporalOptions(int multiple/*=1*/, CalendarUnit unit/*=arrow::compute::CalendarUnit::DAY*/,
                                  @Cast("bool") boolean week_starts_monday/*=true*/,
                                  @Cast("bool") boolean ceil_is_strictly_greater/*=false*/,
                                  @Cast("bool") boolean calendar_based_origin/*=false*/) { super((Pointer)null); allocate(multiple, unit, week_starts_monday, ceil_is_strictly_greater, calendar_based_origin); }
  private native void allocate(int multiple/*=1*/, CalendarUnit unit/*=arrow::compute::CalendarUnit::DAY*/,
                                  @Cast("bool") boolean week_starts_monday/*=true*/,
                                  @Cast("bool") boolean ceil_is_strictly_greater/*=false*/,
                                  @Cast("bool") boolean calendar_based_origin/*=false*/);
  public RoundTemporalOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  public RoundTemporalOptions(int multiple/*=1*/, @Cast("arrow::compute::CalendarUnit") byte unit/*=arrow::compute::CalendarUnit::DAY*/,
                                  @Cast("bool") boolean week_starts_monday/*=true*/,
                                  @Cast("bool") boolean ceil_is_strictly_greater/*=false*/,
                                  @Cast("bool") boolean calendar_based_origin/*=false*/) { super((Pointer)null); allocate(multiple, unit, week_starts_monday, ceil_is_strictly_greater, calendar_based_origin); }
  private native void allocate(int multiple/*=1*/, @Cast("arrow::compute::CalendarUnit") byte unit/*=arrow::compute::CalendarUnit::DAY*/,
                                  @Cast("bool") boolean week_starts_monday/*=true*/,
                                  @Cast("bool") boolean ceil_is_strictly_greater/*=false*/,
                                  @Cast("bool") boolean calendar_based_origin/*=false*/);
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();
  public static native @ByVal RoundTemporalOptions Defaults();

  /** Number of units to round to */
  public native int multiple(); public native RoundTemporalOptions multiple(int setter);
  /** The unit used for rounding of time */
  public native CalendarUnit unit(); public native RoundTemporalOptions unit(CalendarUnit setter);
  /** What day does the week start with (Monday=true, Sunday=false) */
  public native @Cast("bool") boolean week_starts_monday(); public native RoundTemporalOptions week_starts_monday(boolean setter);
  /** Enable this flag to return a rounded value that is strictly greater than the input.
   *  For example: ceiling 1970-01-01T00:00:00 to 3 hours would yield 1970-01-01T03:00:00
   *  if set to true and 1970-01-01T00:00:00 if set to false.
   *  This applies for ceiling only. */
  public native @Cast("bool") boolean ceil_is_strictly_greater(); public native RoundTemporalOptions ceil_is_strictly_greater(boolean setter);
  /** By default time is rounded to a multiple of units since 1970-01-01T00:00:00.
   *  By setting calendar_based_origin to true, time will be rounded to a number
   *  of units since the last greater calendar unit.
   *  For example: rounding to a multiple of days since the beginning of the month or
   *  to hours since the beginning of the day.
   *  Exceptions: week and quarter are not used as greater units, therefore days will
   *  will be rounded to the beginning of the month not week. Greater unit of week
   *  is year.
   *  Note that ceiling and rounding might change sorting order of an array near greater
   *  unit change. For example rounding YYYY-mm-dd 23:00:00 to 5 hours will ceil and
   *  round to YYYY-mm-dd+1 01:00:00 and floor to YYYY-mm-dd 20:00:00. On the other hand
   *  YYYY-mm-dd+1 00:00:00 will ceil, round and floor to YYYY-mm-dd+1 00:00:00. This
   *  can break the order of an already ordered array. */
  public native @Cast("bool") boolean calendar_based_origin(); public native RoundTemporalOptions calendar_based_origin(boolean setter);
}
