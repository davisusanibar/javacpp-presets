// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class ExecResult extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ExecResult() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ExecResult(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ExecResult(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ExecResult position(long position) {
        return (ExecResult)super.position(position);
    }
    @Override public ExecResult getPointer(long i) {
        return new ExecResult((Pointer)this).offsetAddress(i);
    }

  // The default value of the variant is ArraySpan
  public native @ByRef ArraySpanArrayDataMap value(); public native ExecResult value(ArraySpanArrayDataMap setter);

  public native @Cast("int64_t") long length();

  public native @Const DataType type();

  public native ArraySpan array_span();
  public native @Cast("bool") boolean is_array_span();

  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::ArrayData>"}) ArrayData array_data();

  public native @Cast("bool") boolean is_array_data();
}
