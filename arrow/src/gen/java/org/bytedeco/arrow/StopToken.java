// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** EXPERIMENTAL */
@Namespace("arrow") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class StopToken extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StopToken(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public StopToken(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public StopToken position(long position) {
        return (StopToken)super.position(position);
    }
    @Override public StopToken getPointer(long i) {
        return new StopToken((Pointer)this).offsetAddress(i);
    }

  // Public for Cython
  public StopToken() { super((Pointer)null); allocate(); }
  private native void allocate();

  // A trivial token that never propagates any stop request
  
  ///
  ///
  ///
  public static native @ByVal StopToken Unstoppable();

  /** \brief Check if the stop source has been cancelled.
   * 
   *  Producers should call this method, whenever convenient, to check and
   *  see if they should stop producing early (i.e. have been cancelled).
   *  Failure to call this method often enough will lead to an unresponsive
   *  cancellation.
   * 
   *  This is part of the producer API (the side that gets asked to stop)
   *  This method is thread-safe
   * 
   *  @return An OK status if the stop source has not been cancelled or a
   *          cancel error if the source has been cancelled. */
  public native @ByVal Status Poll();
  public native @Cast("bool") boolean IsStopRequested();
}
