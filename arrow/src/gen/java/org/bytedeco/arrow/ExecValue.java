// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class ExecValue extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ExecValue(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ExecValue(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ExecValue position(long position) {
        return (ExecValue)super.position(position);
    }
    @Override public ExecValue getPointer(long i) {
        return new ExecValue((Pointer)this).offsetAddress(i);
    }

  public native @ByRef ArraySpan array(); public native ExecValue array(ArraySpan setter);
  public native @Const Scalar scalar(); public native ExecValue scalar(Scalar setter);

  public ExecValue(Scalar scalar) { super((Pointer)null); allocate(scalar); }
  private native void allocate(Scalar scalar);

  public ExecValue(@ByVal ArraySpan array) { super((Pointer)null); allocate(array); }
  private native void allocate(@ByVal ArraySpan array);

  public ExecValue(@Const @ByRef ArrayData array) { super((Pointer)null); allocate(array); }
  private native void allocate(@Const @ByRef ArrayData array);

  public ExecValue() { super((Pointer)null); allocate(); }
  private native void allocate();
  public ExecValue(@Const @ByRef ExecValue other) { super((Pointer)null); allocate(other); }
  private native void allocate(@Const @ByRef ExecValue other);
  public native @ByRef @Name("operator =") ExecValue put(@Const @ByRef ExecValue other);

  public native @Cast("int64_t") long length();

  public native @Cast("bool") boolean is_array();
  public native @Cast("bool") boolean is_scalar();

  public native void SetArray(@Const @ByRef ArrayData array);

  public native void SetScalar(@Const Scalar scalar);

  /** XXX: here temporarily for compatibility with datum, see
   *  e.g. MakeStructExec in scalar_nested.cc */
  public native @Cast("int64_t") long null_count();

  public native @Const DataType type();
}
