// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief A non-owning Buffer reference */
@Namespace("arrow") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class BufferSpan extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public BufferSpan() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public BufferSpan(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public BufferSpan(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public BufferSpan position(long position) {
        return (BufferSpan)super.position(position);
    }
    @Override public BufferSpan getPointer(long i) {
        return new BufferSpan((Pointer)this).offsetAddress(i);
    }

  // It is the user of this class's responsibility to ensure that
  // buffers that were const originally are not written to
  // accidentally.
  public native @Cast("uint8_t*") BytePointer data(); public native BufferSpan data(BytePointer setter);
  public native @Cast("int64_t") long size(); public native BufferSpan size(long setter);
  // Pointer back to buffer that owns this memory
  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::Buffer>*"}) ArrowBuffer owner(); public native BufferSpan owner(ArrowBuffer setter);
}
