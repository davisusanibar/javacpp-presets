// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class ListSliceOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ListSliceOptions(Pointer p) { super(p); }

  public ListSliceOptions(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongPointer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional BoolPointer return_fixed_size_list/*=std::nullopt*/) { super((Pointer)null); allocate(start, stop, step, return_fixed_size_list); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongPointer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional BoolPointer return_fixed_size_list/*=std::nullopt*/);
  public ListSliceOptions(@Cast("int64_t") long start) { super((Pointer)null); allocate(start); }
  private native void allocate(@Cast("int64_t") long start);
  public ListSliceOptions(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongBuffer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional boolean[] return_fixed_size_list/*=std::nullopt*/) { super((Pointer)null); allocate(start, stop, step, return_fixed_size_list); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongBuffer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional boolean[] return_fixed_size_list/*=std::nullopt*/);
  public ListSliceOptions(@Cast("int64_t") long start, @Cast("int64_t*") @Optional long[] stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional BoolPointer return_fixed_size_list/*=std::nullopt*/) { super((Pointer)null); allocate(start, stop, step, return_fixed_size_list); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t*") @Optional long[] stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional BoolPointer return_fixed_size_list/*=std::nullopt*/);
  public ListSliceOptions(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongPointer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional boolean[] return_fixed_size_list/*=std::nullopt*/) { super((Pointer)null); allocate(start, stop, step, return_fixed_size_list); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongPointer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional boolean[] return_fixed_size_list/*=std::nullopt*/);
  public ListSliceOptions(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongBuffer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional BoolPointer return_fixed_size_list/*=std::nullopt*/) { super((Pointer)null); allocate(start, stop, step, return_fixed_size_list); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t*") @Optional LongBuffer stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional BoolPointer return_fixed_size_list/*=std::nullopt*/);
  public ListSliceOptions(@Cast("int64_t") long start, @Cast("int64_t*") @Optional long[] stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional boolean[] return_fixed_size_list/*=std::nullopt*/) { super((Pointer)null); allocate(start, stop, step, return_fixed_size_list); }
  private native void allocate(@Cast("int64_t") long start, @Cast("int64_t*") @Optional long[] stop/*=std::nullopt*/,
                              @Cast("int64_t") long step/*=1*/,
                              @Cast("bool*") @Optional boolean[] return_fixed_size_list/*=std::nullopt*/);
  public ListSliceOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();
  /** The start of list slicing. */
  public native @Cast("int64_t") long start(); public native ListSliceOptions start(long setter);
  /** Optional stop of list slicing. If not set, then slice to end. (NotImplemented) */
  public native @Cast("int64_t*") @Optional LongPointer stop(); public native ListSliceOptions stop(LongPointer setter);
  /** Slicing step */
  public native @Cast("int64_t") long step(); public native ListSliceOptions step(long setter);
  // Whether to return a FixedSizeListArray. If true _and_ stop is after
  // a list element's length, nulls will be appended to create the requested slice size.
  // Default of `nullopt` will return whatever type it got in.
  public native @Cast("bool*") @Optional BoolPointer return_fixed_size_list(); public native ListSliceOptions return_fixed_size_list(BoolPointer setter);
}
