// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief Options for cumulative sum function */
@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class CumulativeSumOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CumulativeSumOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public CumulativeSumOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public CumulativeSumOptions position(long position) {
        return (CumulativeSumOptions)super.position(position);
    }
    @Override public CumulativeSumOptions getPointer(long i) {
        return new CumulativeSumOptions((Pointer)this).offsetAddress(i);
    }

  public CumulativeSumOptions(double start/*=0*/, @Cast("bool") boolean skip_nulls/*=false*/,
                                  @Cast("bool") boolean check_overflow/*=false*/) { super((Pointer)null); allocate(start, skip_nulls, check_overflow); }
  private native void allocate(double start/*=0*/, @Cast("bool") boolean skip_nulls/*=false*/,
                                  @Cast("bool") boolean check_overflow/*=false*/);
  public CumulativeSumOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  public CumulativeSumOptions(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar start, @Cast("bool") boolean skip_nulls/*=false*/,
                                  @Cast("bool") boolean check_overflow/*=false*/) { super((Pointer)null); allocate(start, skip_nulls, check_overflow); }
  private native void allocate(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar start, @Cast("bool") boolean skip_nulls/*=false*/,
                                  @Cast("bool") boolean check_overflow/*=false*/);
  public CumulativeSumOptions(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar start) { super((Pointer)null); allocate(start); }
  private native void allocate(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar start);
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();
  public static native @ByVal CumulativeSumOptions Defaults();

  /** Optional starting value for cumulative operation computation */
  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar start(); public native CumulativeSumOptions start(Scalar setter);

  /** If true, nulls in the input are ignored and produce a corresponding null output.
   *  When false, the first null encountered is propagated through the remaining output. */
  public native @Cast("bool") boolean skip_nulls(); public native CumulativeSumOptions skip_nulls(boolean setter);

  /** When true, returns an Invalid Status when overflow is detected */
  public native @Cast("bool") boolean check_overflow(); public native CumulativeSumOptions check_overflow(boolean setter);
}
