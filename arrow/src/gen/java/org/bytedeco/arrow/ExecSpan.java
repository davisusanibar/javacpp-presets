// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief A "lightweight" column batch object which contains no
 *  std::shared_ptr objects and does not have any memory ownership
 *  semantics. Can represent a view onto an "owning" ExecBatch. */
@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class ExecSpan extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ExecSpan(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ExecSpan(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public ExecSpan position(long position) {
        return (ExecSpan)super.position(position);
    }
    @Override public ExecSpan getPointer(long i) {
        return new ExecSpan((Pointer)this).offsetAddress(i);
    }

  public ExecSpan() { super((Pointer)null); allocate(); }
  private native void allocate();
  public ExecSpan(@Const @ByRef ExecSpan other) { super((Pointer)null); allocate(other); }
  private native void allocate(@Const @ByRef ExecSpan other);
  public native @ByRef @Name("operator =") ExecSpan put(@Const @ByRef ExecSpan other);

  public ExecSpan(@StdVector ExecValue values, @Cast("int64_t") long length) { super((Pointer)null); allocate(values, length); }
  private native void allocate(@StdVector ExecValue values, @Cast("int64_t") long length);

  public ExecSpan(@Const @ByRef ExecBatch batch) { super((Pointer)null); allocate(batch); }
  private native void allocate(@Const @ByRef ExecBatch batch);

  /** \brief Return the value at the i-th index */

  /** \brief A convenience for the number of values / arguments. */
  public native int num_values();

  public native @StdVector TypeHolder GetTypes();

  public native @ByVal ExecBatch ToExecBatch();

  public native @Cast("int64_t") long length(); public native ExecSpan length(long setter);
  public native @StdVector ExecValue values(); public native ExecSpan values(ExecValue setter);
}
