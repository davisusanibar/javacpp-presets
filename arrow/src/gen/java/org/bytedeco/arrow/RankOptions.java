// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief Rank options */
@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class RankOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RankOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RankOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public RankOptions position(long position) {
        return (RankOptions)super.position(position);
    }
    @Override public RankOptions getPointer(long i) {
        return new RankOptions((Pointer)this).offsetAddress(i);
    }

  /** Configure how ties between equal values are handled */
  public enum Tiebreaker {
    /** Ties get the smallest possible rank in sorted order. */
    Min(0),
    /** Ties get the largest possible rank in sorted order. */
    Max(1),
    /** Ranks are assigned in order of when ties appear in the input.
     *  This ensures the ranks are a stable permutation of the input. */
    First(2),
    /** The ranks span a dense [1, M] interval where M is the number
     *  of distinct values in the input. */
    Dense(3);

      public final int value;
      private Tiebreaker(int v) { this.value = v; }
      private Tiebreaker(Tiebreaker e) { this.value = e.value; }
      public Tiebreaker intern() { for (Tiebreaker e : values()) if (e.value == value) return e; return this; }
      @Override public String toString() { return intern().name(); }
  }

  public RankOptions(@StdVector SortKey sort_keys/*={}*/,
                         NullPlacement null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         Tiebreaker tiebreaker/*=arrow::compute::RankOptions::First*/) { super((Pointer)null); allocate(sort_keys, null_placement, tiebreaker); }
  private native void allocate(@StdVector SortKey sort_keys/*={}*/,
                         NullPlacement null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         Tiebreaker tiebreaker/*=arrow::compute::RankOptions::First*/);
  public RankOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  public RankOptions(@StdVector SortKey sort_keys/*={}*/,
                         @Cast("arrow::compute::NullPlacement") int null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         @Cast("arrow::compute::RankOptions::Tiebreaker") int tiebreaker/*=arrow::compute::RankOptions::First*/) { super((Pointer)null); allocate(sort_keys, null_placement, tiebreaker); }
  private native void allocate(@StdVector SortKey sort_keys/*={}*/,
                         @Cast("arrow::compute::NullPlacement") int null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         @Cast("arrow::compute::RankOptions::Tiebreaker") int tiebreaker/*=arrow::compute::RankOptions::First*/);
  /** Convenience constructor for array inputs */
  public RankOptions(SortOrder order,
                         NullPlacement null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         Tiebreaker tiebreaker/*=arrow::compute::RankOptions::First*/) { super((Pointer)null); allocate(order, null_placement, tiebreaker); }
  private native void allocate(SortOrder order,
                         NullPlacement null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         Tiebreaker tiebreaker/*=arrow::compute::RankOptions::First*/);
  public RankOptions(SortOrder order) { super((Pointer)null); allocate(order); }
  private native void allocate(SortOrder order);
  public RankOptions(@Cast("arrow::compute::SortOrder") int order,
                         @Cast("arrow::compute::NullPlacement") int null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         @Cast("arrow::compute::RankOptions::Tiebreaker") int tiebreaker/*=arrow::compute::RankOptions::First*/) { super((Pointer)null); allocate(order, null_placement, tiebreaker); }
  private native void allocate(@Cast("arrow::compute::SortOrder") int order,
                         @Cast("arrow::compute::NullPlacement") int null_placement/*=arrow::compute::NullPlacement::AtEnd*/,
                         @Cast("arrow::compute::RankOptions::Tiebreaker") int tiebreaker/*=arrow::compute::RankOptions::First*/);
  public RankOptions(@Cast("arrow::compute::SortOrder") int order) { super((Pointer)null); allocate(order); }
  private native void allocate(@Cast("arrow::compute::SortOrder") int order);

  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();
  public static native @ByVal RankOptions Defaults();

  /** Column key(s) to order by and how to order by these sort keys. */
  public native @StdVector SortKey sort_keys(); public native RankOptions sort_keys(SortKey setter);
  /** Whether nulls and NaNs are placed at the start or at the end */
  public native NullPlacement null_placement(); public native RankOptions null_placement(NullPlacement setter);
  /** Tiebreaker for dealing with equal values in ranks */
  public native Tiebreaker tiebreaker(); public native RankOptions tiebreaker(Tiebreaker setter);
}
