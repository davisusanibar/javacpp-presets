// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow") @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class Time32Scalar extends BaseTime32Scalar {
    static { Loader.load(); }

  
    
    
      public Time32Scalar(@Cast("arrow::TemporalScalar<arrow::Time32Type>::ValueType") int value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type) { super((Pointer)null); allocate(value, type); }
      private native void allocate(@Cast("arrow::TemporalScalar<arrow::Time32Type>::ValueType") int value, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type);
  
  
    public Time32Scalar(@Cast("arrow::TemporalScalar<arrow::Time32Type>::ValueType") int value, TimeUnit.type unit) { super((Pointer)null); allocate(value, unit); }
    private native void allocate(@Cast("arrow::TemporalScalar<arrow::Time32Type>::ValueType") int value, TimeUnit.type unit);
    public Time32Scalar(@Cast("arrow::TemporalScalar<arrow::Time32Type>::ValueType") int value, @Cast("arrow::TimeUnit::type") int unit) { super((Pointer)null); allocate(value, unit); }
    private native void allocate(@Cast("arrow::TemporalScalar<arrow::Time32Type>::ValueType") int value, @Cast("arrow::TimeUnit::type") int unit);
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Time32Scalar(Pointer p) { super(p); }

}
