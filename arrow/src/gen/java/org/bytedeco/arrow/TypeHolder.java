// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** \brief EXPERIMENTAL: Container for a type pointer which can hold a
 *  dynamically created shared_ptr<DataType> if it needs to. */
@Namespace("arrow") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class TypeHolder extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TypeHolder(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TypeHolder(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public TypeHolder position(long position) {
        return (TypeHolder)super.position(position);
    }
    @Override public TypeHolder getPointer(long i) {
        return new TypeHolder((Pointer)this).offsetAddress(i);
    }

  public native @Const DataType type(); public native TypeHolder type(DataType setter);
  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType owned_type(); public native TypeHolder owned_type(DataType setter);

  public TypeHolder() { super((Pointer)null); allocate(); }
  private native void allocate();
  public TypeHolder(@Const @ByRef TypeHolder other) { super((Pointer)null); allocate(other); }
  private native void allocate(@Const @ByRef TypeHolder other);
  public native @ByRef @Name("operator =") TypeHolder put(@Const @ByRef TypeHolder other);

  public TypeHolder(@SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType owned_type) { super((Pointer)null); allocate(owned_type); }
  private native void allocate(@SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType owned_type);

  public native @Cast("arrow::Type::type") int id();

  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType GetSharedPtr();

  public native @Const @ByRef @Name("operator *") DataType multiply();

  public native @Cast("bool") @Name("operator bool") boolean asBoolean();

  

  

  

  public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef DataType other);

  

  public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef TypeHolder other);

  public native @StdString String ToString();

  public static native @StdString String ToString(@StdVector TypeHolder arg0);
}
