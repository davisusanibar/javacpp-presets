// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


/** Options for struct_field function */
@Namespace("arrow::compute") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class StructFieldOptions extends FunctionOptions {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public StructFieldOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public StructFieldOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public StructFieldOptions position(long position) {
        return (StructFieldOptions)super.position(position);
    }
    @Override public StructFieldOptions getPointer(long i) {
        return new StructFieldOptions((Pointer)this).offsetAddress(i);
    }

  public StructFieldOptions(@StdVector IntPointer indices) { super((Pointer)null); allocate(indices); }
  private native void allocate(@StdVector IntPointer indices);
  public StructFieldOptions(@StdVector IntBuffer indices) { super((Pointer)null); allocate(indices); }
  private native void allocate(@StdVector IntBuffer indices);
  public StructFieldOptions(@StdVector int[] indices) { super((Pointer)null); allocate(indices); }
  private native void allocate(@StdVector int[] indices);
  public StructFieldOptions(@ByVal FieldRef field_ref) { super((Pointer)null); allocate(field_ref); }
  private native void allocate(@ByVal FieldRef field_ref);
  public StructFieldOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  @MemberGetter public static native byte kTypeName(int i);
  @MemberGetter public static native String kTypeName();

  /** The FieldRef specifying what to extract from struct or union. */
  public native @ByRef FieldRef field_ref(); public native StructFieldOptions field_ref(FieldRef setter);
}
