// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.arrow;

import org.bytedeco.arrow.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.arrow.global.arrow.*;


@Namespace("arrow") @NoOffset @Properties(inherit = org.bytedeco.arrow.presets.arrow.class)
public class SparseUnionScalar extends UnionScalar {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SparseUnionScalar(Pointer p) { super(p); }


  // Even though only one of the union values is relevant for this scalar, we
  // nonetheless construct a vector of scalars, one per union value, to have
  // enough data to reconstruct a valid ArraySpan of length 1 from this scalar
  public native @ByRef @Cast("arrow::SparseUnionScalar::ValueType*") ScalarVector value(); public native SparseUnionScalar value(ScalarVector setter);

  // The value index corresponding to the active type code
  public native int child_id(); public native SparseUnionScalar child_id(int setter);

  public SparseUnionScalar(@ByVal @Cast("arrow::SparseUnionScalar::ValueType*") ScalarVector value, byte type_code, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type) { super((Pointer)null); allocate(value, type_code, type); }
  private native void allocate(@ByVal @Cast("arrow::SparseUnionScalar::ValueType*") ScalarVector value, byte type_code, @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type);

  public native @SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar child_value();

  /** \brief Construct a SparseUnionScalar from a single value, versus having
   *  to construct a vector of scalars */
  public static native @SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar FromValue(@SharedPtr @Cast({"", "std::shared_ptr<arrow::Scalar>"}) Scalar value, int field_index,
                                             @SharedPtr @Cast({"", "std::shared_ptr<arrow::DataType>"}) DataType type);
}
